# This workflow automates testing and deployment for your project

name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job for backend testing
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.11'  # Specify the Python version here
          cache: 'pip'            # Enable caching for pip dependencies
          architecture: 'x64'     # Specify the architecture (default is x64)

      # Step 3: Install dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run tests using pytest
      - name: Run Python tests
        run: pytest

  # Job 2: Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Step 3: Install dependencies
      - name: Install Node.js dependencies
        run: npm install

      # Step 4: Run tests using npm
      - name: Run Node.js tests
        run: npm test

  # Job 3: Deployment
  deploy:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t your-dockerhub-username/codened:latest .
          docker push your-dockerhub-username/codened:latest

      # Step 4: Deploy to platform
      - name: Deploy to server
        run: |
          echo "Deploying the Docker image to the target platform..."
